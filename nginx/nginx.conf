server {
    listen 80;
    server_name intranet.eurocast.local;

    # Authenticate requests via oauth2-proxy (Azure AD)
    location = /oauth2/auth {
        proxy_pass       http://oauth2-proxy:4180/oauth2/auth;
        proxy_set_header Host                    $host;
        proxy_set_header X-Original-URI          $request_uri;
        proxy_set_header X-Real-IP               $remote_addr;
        proxy_set_header X-Forwarded-For         $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto       $scheme;
        proxy_set_header X-Forwarded-Host        $host;
    }

    # Static HTML protected by auth_request
    location / {
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/start;

        root /usr/share/nginx/html;
        index New_collaborateur.html;
        try_files $uri $uri/ /New_collaborateur.html;

        # Forward user info headers from oauth2-proxy to backend if needed
        auth_request_set $user  $upstream_http_x_auth_request_user;
        auth_request_set $email $upstream_http_x_auth_request_email;
        proxy_set_header X-Remote-User $user;
        proxy_set_header X-Remote-Email $email;
    }

    # oauth2-proxy endpoints
    location /oauth2/ {
        proxy_pass       http://oauth2-proxy:4180;
        proxy_set_header Host                    $host;
        proxy_set_header X-Real-IP               $remote_addr;
        proxy_set_header X-Forwarded-For         $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto       $scheme;
        proxy_set_header X-Forwarded-Host        $host;
    }

    # Backend API (trusted, can read X-Remote-User header if needed)
    location /api/ {
        proxy_pass http://backend:5000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        proxy_set_header X-Remote-User $user;
        proxy_set_header X-Remote-Email $email;

    }
}